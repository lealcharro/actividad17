name: Kanban Board Automation 

on:
  issues:
    types: [closed]
  pull_request:
    types: [opened, ready_for_review]

jobs:
  move_issues:
    runs-on: ubuntu-latest
    steps:
      - name: Move issue to In Progress when PR is opened or ready for review
        if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'ready_for_review')
        uses: actions/github-script@v7
        with:
          script: |
            const projectId = 'PVT_kwHOCAZAJs4A5AAx';
            const statusFieldId = 'PVTSSF_lAHOCAZAJs4A5AAxzgt33Fk';
            const inProgressOptionId = '47fc9ee4';
            const issueNumbers = (context.payload.pull_request.body.match(/#(\d+)/g) || []).map(s => s.replace('#', ''));
            for (const issue_number of issueNumbers) {
              // Buscar el item del proyecto asociado a la issue
              const items = await github.graphql(query($projectId:ID!, $first:Int!) {\n  node(id: $projectId) {\n    ... on ProjectV2 {\n      items(first: $first) {\n        nodes {\n          id\n          content {\n            ... on Issue { number }\n          }\n        }\n      }\n    }\n  }\n}, { projectId, first: 100 });
              const item = items.node.items.nodes.find(i => i.content && i.content.number == issue_number);
              if (item) {
                await github.graphql(mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $optionId:String!) {\n  updateProjectV2ItemFieldValue(input: {\n    projectId: $projectId,\n    itemId: $itemId,\n    fieldId: $fieldId,\n    value: { singleSelectOptionId: $optionId }\n  }) {\n    projectV2Item { id }\n  }\n}, {
                  projectId,
                  itemId: item.id,
                  fieldId: statusFieldId,
                  optionId: inProgressOptionId
                });
              }
            }

      - name: Move issue to Done when issue is closed
        if: github.event_name == 'issues' && github.event.action == 'closed'
        uses: actions/github-script@v7
        with:
          script: |
            const projectId = 'PVT_kwHOCAZAJs4A5AAx';
            const statusFieldId = 'PVTSSF_lAHOCAZAJs4A5AAxzgt33Fk';
            const doneOptionId = '98236657';
            const issue_number = context.payload.issue.number;
            // Buscar el item del proyecto asociado a la issue
            const items = await github.graphql(query($projectId:ID!, $first:Int!) {\n  node(id: $projectId) {\n    ... on ProjectV2 {\n      items(first: $first) {\n        nodes {\n          id\n          content {\n            ... on Issue { number }\n          }\n        }\n      }\n    }\n  }\n}, { projectId, first: 100 });
            const item = items.node.items.nodes.find(i => i.content && i.content.number == issue_number);
            if (item) {
              await github.graphql(mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $optionId:String!) {\n  updateProjectV2ItemFieldValue(input: {\n    projectId: $projectId,\n    itemId: $itemId,\n    fieldId: $fieldId,\n    value: { singleSelectOptionId: $optionId }\n  }) {\n    projectV2Item { id }\n  }\n}, {
                projectId,
                itemId: item.id,
                fieldId: statusFieldId,
                optionId: doneOptionId
              });
            }
